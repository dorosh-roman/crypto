S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

INV_S_BOX = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]

def generate_round_keys(master_key):
    rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]
    round_keys = [master_key[i:i + 4] for i in range(0, len(master_key), 4)]
    for i in range(4, 44):
        temp = round_keys[i - 1][:]
        if i % 4 == 0:
            temp = [temp[1], temp[2], temp[3], temp[0]]
            temp = [S_BOX[byte] for byte in temp]
            temp[0] ^= rcon[i // 4 - 1]
        round_keys.append([x ^ y for x, y in zip(round_keys[i - 4], temp)])
    return round_keys

def apply_round_key(state, round_key):
    for row in range(4):
        for col in range(4):
            state[row][col] ^= round_key[row][col]
    return state

def substitute_bytes(state):
    for row in range(4):
        for col in range(4):
            state[row][col] = S_BOX[state[row][col]]
    return state

def shift_rows(state):
    for row in range(1, 4):
        shifted = [state[col][row] for col in range(len(state))]
        shifted = shifted[row:] + shifted[:row]
        for col in range(len(state)):
            state[col][row] = shifted[col]
    return state

def mix_columns(state):
    for col in range(4):
        a, b, c, d = state[col]
        state[col][0] = multiply_by_2(a) ^ multiply_by_3(b) ^ c ^ d
        state[col][1] = a ^ multiply_by_2(b) ^ multiply_by_3(c) ^ d
        state[col][2] = a ^ b ^ multiply_by_2(c) ^ multiply_by_3(d)
        state[col][3] = multiply_by_3(a) ^ b ^ c ^ multiply_by_2(d)
    return state

def multiply_by_2(value):
    return ((value << 1) ^ 0x1B if value & 0x80 else value << 1) & 0xFF

def multiply_by_3(value):
    return multiply_by_2(value) ^ value

def multiply_by_09(value):
    return multiply_by_2(multiply_by_2(multiply_by_2(value))) ^ value

def multiply_by_0b(value):
    temp = multiply_by_2(value)
    temp = multiply_by_2(temp)
    temp ^= value
    temp = multiply_by_2(temp)
    return temp ^ value

def multiply_by_0d(value):
    temp = multiply_by_2(value)
    temp ^= value
    temp = multiply_by_2(temp)
    temp = multiply_by_2(temp)
    return temp ^ value

def multiply_by_0e(value):
    temp = multiply_by_2(value)
    temp ^= value
    temp = multiply_by_2(temp)
    temp ^= value
    temp = multiply_by_2(temp)
    return temp

def unshift_rows(state):
    for row in range(1, 4):
        shifted = [state[col][row] for col in range(len(state))]
        shifted = shifted[-row:] + shifted[:-row]
        for col in range(len(state)):
            state[col][row] = shifted[col]
    return state

def inverse_substitute_bytes(state):
    for row in range(4):
        for col in range(4):
            state[row][col] = INV_S_BOX[state[row][col]]
    return state

def unmix_columns(state):
    for col in range(4):
        a, b, c, d = state[col]
        state[col][0] = multiply_by_0e(a) ^ multiply_by_0b(b) ^ multiply_by_0d(c) ^ multiply_by_09(d)
        state[col][1] = multiply_by_09(a) ^ multiply_by_0e(b) ^ multiply_by_0b(c) ^ multiply_by_0d(d)
        state[col][2] = multiply_by_0d(a) ^ multiply_by_09(b) ^ multiply_by_0e(c) ^ multiply_by_0b(d)
        state[col][3] = multiply_by_0b(a) ^ multiply_by_0d(b) ^ multiply_by_09(c) ^ multiply_by_0e(d)
    return state

def aes_encrypt(block, key):
    state = [[0] * 4 for _ in range(4)]
    for row in range(4):
        for col in range(4):
            state[row][col] = block[row * 4 + col]

    print("\nInitial Block:")
    display_state(state)

    round_keys = generate_round_keys(key)
    state = apply_round_key(state, round_keys[0:4])

    for round_num in range(1, 10):
        state = substitute_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = apply_round_key(state, round_keys[round_num * 4: (round_num + 1) * 4])
        print(f"After Round {round_num}:")
        display_state(state)

    state = substitute_bytes(state)
    state = shift_rows(state)
    state = apply_round_key(state, round_keys[40:])

    print("Final Encrypted Block:")
    display_state(state)

    return bytes(state[row][col] for row in range(4) for col in range(4))

def aes_decrypt(block, key):
    state = [[0] * 4 for _ in range(4)]
    for row in range(4):
        for col in range(4):
            state[row][col] = block[row * 4 + col]

    round_keys = generate_round_keys(key)
    state = apply_round_key(state, round_keys[40:])

    for round_num in range(9, 0, -1):
        state = unshift_rows(state)
        state = inverse_substitute_bytes(state)
        state = apply_round_key(state, round_keys[round_num * 4: (round_num + 1) * 4])
        state = unmix_columns(state)
        print(f"After Round {round_num}:")
        display_state(state)

    state = unshift_rows(state)
    state = inverse_substitute_bytes(state)
    state = apply_round_key(state, round_keys[0:4])

    print("Decrypted Block:")
    display_state(state)

    return bytes(state[row][col] for row in range(4) for col in range(4))

def display_state(state):
    for row in state:
        print(' '.join([f"{byte:02x}" for byte in row]))

input_message = input("Enter a 16-character message: ").encode('utf-8')
input_key = input("Enter a 16-character key: ").encode('utf-8')

if len(input_message) != 16 or len(input_key) != 16:
    print("Both the message and the key must be 16 characters long!")
else:
    encrypted = aes_encrypt(input_message, input_key)
    print("\nEncrypted Hex:", encrypted.hex())

    decrypted = aes_decrypt(encrypted, input_key)
    print("\nDecrypted Message:", decrypted.decode('utf-8'))